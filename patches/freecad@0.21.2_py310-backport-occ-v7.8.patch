commit 7cdf62d6e2dfe27983823b530a49ebbd46b6cbe2
Author: bgbsww <120601209+bgbsww@users.noreply.github.com>
Date:   Tue Jan 9 20:47:25 2024 -0500

    Add support for OCCT 7.8.0 (#11909)

diff --git a/cMake/FindOCC.cmake b/cMake/FindOCC.cmake
index 48e5c98750..74cf1c218d 100644
--- a/cMake/FindOCC.cmake
+++ b/cMake/FindOCC.cmake
@@ -127,8 +127,6 @@ if(OCC_FOUND)
     TKG2d
     TKG3d
     TKMath
-    TKIGES
-    TKSTL
     TKShHealing
     TKXSBase
     TKBool
@@ -139,10 +137,6 @@ if(OCC_FOUND)
     TKGeomBase
     TKOffset
     TKPrim
-    TKSTEPBase
-    TKSTEPAttr
-    TKSTEP209
-    TKSTEP
     TKHLR
     TKFeat
   )
@@ -154,8 +148,6 @@ if(OCC_FOUND)
     TKLCAF
     TKVCAF
     TKCDF
-    TKXDESTEP
-    TKXDEIGES
     TKMeshVS
     TKService
     TKV3d
@@ -164,7 +156,13 @@ if(OCC_FOUND)
     list(APPEND OCC_OCAF_LIBRARIES TKAdvTools)
   elseif(NOT OCC_VERSION_STRING VERSION_LESS 7.5.0)
     list(APPEND OCC_OCAF_LIBRARIES TKRWMesh)
-  endif(OCC_VERSION_STRING VERSION_LESS 6.7.3)
+  endif(NOT OCC_VERSION_STRING VERSION_LESS 7.5.0)
+  if(OCC_VERSION_STRING VERSION_LESS 7.8.0)
+    list(APPEND OCC_LIBRARIES TKIGES TKSTL TKSTEPBase TKSTEPAttr TKSTEP209 TKSTEP)
+    list(APPEND OCC_OCAF_LIBRARIES TKXDESTEP TKXDEIGES)
+  else(OCC_VERSION_STRING VERSION_LESS 7.8.0)
+    list(APPEND OCC_LIBRARIES TKDESTEP TKDEIGES TKDEGLTF TKDESTL)
+  endif(OCC_VERSION_STRING VERSION_LESS 7.8.0)
   message(STATUS "-- Found OCE/OpenCASCADE version: ${OCC_VERSION_STRING}")
   message(STATUS "-- OCE/OpenCASCADE include directory: ${OCC_INCLUDE_DIR}")
   message(STATUS "-- OCE/OpenCASCADE shared libraries directory: ${OCC_LIBRARY_DIR}")
diff --git a/src/3rdParty/salomesmesh/inc/SMESHDS_DataMapOfShape.hxx b/src/3rdParty/salomesmesh/inc/SMESHDS_DataMapOfShape.hxx
index 3e083cd84d..67e9f91cde 100644
--- a/src/3rdParty/salomesmesh/inc/SMESHDS_DataMapOfShape.hxx
+++ b/src/3rdParty/salomesmesh/inc/SMESHDS_DataMapOfShape.hxx
@@ -29,13 +29,26 @@
 
 #include <TopoDS_Shape.hxx>
 
+#include <Standard_Version.hxx>
+
 /*
  * This method needed for instance NCollection_DataMap with TopoDS_Shape as key
  */
+#if OCC_VERSION_HEX >= 0x070800
+struct SMESHDS_Hasher
+{
+  size_t operator()(const TopoDS_Shape& S) const noexcept {
+    return std::hash<TopoDS_Shape>{}(S);
+  }
+  size_t operator()(const TopoDS_Shape& S1, const TopoDS_Shape& S2) const noexcept {
+    return S1.IsSame(S2);
+  }
+};
+#else
 struct SMESHDS_Hasher
 {
   static inline Standard_Boolean IsEqual(const TopoDS_Shape& S1,
-                                         const TopoDS_Shape& S2)
+                                        const TopoDS_Shape& S2)
   {
     return S1.IsSame(S2);
   }
@@ -45,6 +58,6 @@ struct SMESHDS_Hasher
     return ::HashCode( S, Upper);
   }
 };
-
+#endif
 
 #endif
diff --git a/src/3rdParty/salomesmesh/inc/SMESH_MeshVSLink.hxx b/src/3rdParty/salomesmesh/inc/SMESH_MeshVSLink.hxx
index 3bc552eb23..6155e20539 100644
--- a/src/3rdParty/salomesmesh/inc/SMESH_MeshVSLink.hxx
+++ b/src/3rdParty/salomesmesh/inc/SMESH_MeshVSLink.hxx
@@ -57,9 +57,6 @@
 #ifndef _MeshVS_EntityType_HeaderFile
 #include <MeshVS_EntityType.hxx>
 #endif
-#ifndef _Standard_Address_HeaderFile
-#include <Standard_Address.hxx>
-#endif
 #ifndef _TColStd_HArray1OfInteger_HeaderFile
 #include <TColStd_HArray1OfInteger.hxx>
 #endif
diff --git a/src/3rdParty/salomesmesh/inc/SMESH_SMESH.hxx b/src/3rdParty/salomesmesh/inc/SMESH_SMESH.hxx
index 1094aed0df..a8fe257ea7 100644
--- a/src/3rdParty/salomesmesh/inc/SMESH_SMESH.hxx
+++ b/src/3rdParty/salomesmesh/inc/SMESH_SMESH.hxx
@@ -37,4 +37,5 @@
  #define SMESH_EXPORT
 #endif
 
+#include <Standard_Version.hxx>
 #endif
diff --git a/src/3rdParty/salomesmesh/inc/SMESH_SequenceOfNode.hxx b/src/3rdParty/salomesmesh/inc/SMESH_SequenceOfNode.hxx
index ada6c8b98b..33c7203cc8 100644
--- a/src/3rdParty/salomesmesh/inc/SMESH_SequenceOfNode.hxx
+++ b/src/3rdParty/salomesmesh/inc/SMESH_SequenceOfNode.hxx
@@ -28,10 +28,11 @@
 
 #include "SMESH_SMESH.hxx"
 
-#include <NCollection_DefineSequence.hxx>
 #if OCC_VERSION_HEX >= 0x060703
 #include <NCollection_IncAllocator.hxx>
 #include <NCollection_Sequence.hxx>
+#else
+#include <NCollection_DefineSequence.hxx>
 #endif
 
 typedef const SMDS_MeshNode* SMDS_MeshNodePtr;
diff --git a/src/3rdParty/salomesmesh/inc/SMESH_TypeDefs.hxx b/src/3rdParty/salomesmesh/inc/SMESH_TypeDefs.hxx
index ac7aa480d8..7090537c46 100644
--- a/src/3rdParty/salomesmesh/inc/SMESH_TypeDefs.hxx
+++ b/src/3rdParty/salomesmesh/inc/SMESH_TypeDefs.hxx
@@ -185,11 +185,18 @@ typedef std::vector< UVPtStruct > UVPtStructVec;
 
 // --------------------------------------------------------------------------------
 // class SMESH_SequenceOfElemPtr
+#include <Standard_Version.hxx>
+#if OCC_VERSION_HEX >= 0x060703
+#include <NCollection_Sequence.hxx>
+#else
 #include <NCollection_DefineSequence.hxx>
+#endif
 
 class SMDS_MeshElement;
 
 typedef const SMDS_MeshElement* SMDS_MeshElementPtr;
+#define DEFINE_SEQUENCE(_ClassName_, _BaseCollection_, TheItemType)            \
+typedef NCollection_Sequence<TheItemType > _ClassName_;
 
 DEFINE_SEQUENCE (SMESH_SequenceOfElemPtr, SMESH_BaseCollectionElemPtr, SMDS_MeshElementPtr)
 
diff --git a/src/3rdParty/salomesmesh/src/DriverSTL/DriverSTL_R_SMDS_Mesh.cpp b/src/3rdParty/salomesmesh/src/DriverSTL/DriverSTL_R_SMDS_Mesh.cpp
index ec3ea2e8e3..4b3791292a 100644
--- a/src/3rdParty/salomesmesh/src/DriverSTL/DriverSTL_R_SMDS_Mesh.cpp
+++ b/src/3rdParty/salomesmesh/src/DriverSTL/DriverSTL_R_SMDS_Mesh.cpp
@@ -33,10 +33,33 @@
 #include "SMDS_MeshNode.hxx"
 #include "SMESH_File.hxx"
 
+#include <Standard_Version.hxx>
+
 namespace
 {
   struct Hasher
   {
+#if OCC_VERSION_HEX >= 0x070800
+    size_t operator()(const gp_Pnt& point) const noexcept
+    {
+      union
+      {
+        Standard_Real    R[3];
+        Standard_Integer I[6];
+      } U;
+
+      point.Coord( U.R[0], U.R[1], U.R[2] );
+      return std::hash<Standard_Integer>{}(U.I[0]/23+U.I[1]/19+U.I[2]/17+U.I[3]/13+U.I[4]/11+U.I[5]/7);
+    }
+
+    size_t operator()(const gp_Pnt& point1, const gp_Pnt& point2) const noexcept
+    {
+      static Standard_Real tab1[3], tab2[3];
+      point1.Coord(tab1[0],tab1[1],tab1[2]);
+      point2.Coord(tab2[0],tab2[1],tab2[2]);
+      return (memcmp(tab1,tab2,sizeof(tab1)) == 0);
+    }
+#else
     //=======================================================================
     //function : HashCode
     //purpose  :
@@ -51,9 +74,9 @@ namespace
       } U;
 
       point.Coord( U.R[0], U.R[1], U.R[2] );
-
-      return ::HashCode(U.I[0]/23+U.I[1]/19+U.I[2]/17+U.I[3]/13+U.I[4]/11+U.I[5]/7,Upper);
+      return std::hash<Standard_Integer>{}(U.I[0]/23+U.I[1]/19+U.I[2]/17+U.I[3]/13+U.I[4]/11+U.I[5]/7);
     }
+
     //=======================================================================
     //function : IsEqual
     //purpose  :
@@ -66,7 +89,9 @@ namespace
       point2.Coord(tab2[0],tab2[1],tab2[2]);
       return (memcmp(tab1,tab2,sizeof(tab1)) == 0);
     }
+#endif
   };
+
   typedef NCollection_DataMap<gp_Pnt,SMDS_MeshNode*,Hasher> TDataMapOfPntNodePtr;
 
   const int HEADER_SIZE           = 84;
diff --git a/src/3rdParty/salomesmesh/src/StdMeshers/StdMeshers_Quadrangle_2D.cpp b/src/3rdParty/salomesmesh/src/StdMeshers/StdMeshers_Quadrangle_2D.cpp
index 5d5c15c366..5ebf9dbfb4 100644
--- a/src/3rdParty/salomesmesh/src/StdMeshers/StdMeshers_Quadrangle_2D.cpp
+++ b/src/3rdParty/salomesmesh/src/StdMeshers/StdMeshers_Quadrangle_2D.cpp
@@ -48,7 +48,6 @@
 #include <Bnd_Box.hxx>
 #include <GeomAPI_ProjectPointOnSurf.hxx>
 #include <Geom_Surface.hxx>
-#include <NCollection_DefineArray2.hxx>
 #include <Precision.hxx>
 #include <Standard_Real.hxx>
 #include <TColStd_SequenceOfInteger.hxx>
diff --git a/src/Mod/Fem/Gui/TaskCreateNodeSet.cpp b/src/Mod/Fem/Gui/TaskCreateNodeSet.cpp
index 4e69796b26..c1fb166ad1 100644
--- a/src/Mod/Fem/Gui/TaskCreateNodeSet.cpp
+++ b/src/Mod/Fem/Gui/TaskCreateNodeSet.cpp
@@ -26,9 +26,8 @@
 # include <Inventor/nodes/SoCamera.h>
 # include <Inventor/nodes/SoEventCallback.h>
 
-# include <SMESH_Mesh.hxx>
-# include <SMESHDS_Mesh.hxx>
-# include <Standard_math.hxx>
+#include <SMESHDS_Mesh.hxx>
+#include <SMESH_Mesh.hxx>
 #endif
 
 #include <Base/Console.h>
diff --git a/src/Mod/Import/App/ImportOCAF.cpp b/src/Mod/Import/App/ImportOCAF.cpp
index 2397b62c37..30c7aa9d2a 100644
--- a/src/Mod/Import/App/ImportOCAF.cpp
+++ b/src/Mod/Import/App/ImportOCAF.cpp
@@ -147,8 +147,12 @@ void ImportOCAF::loadShapes(const TDF_Label& label, const TopLoc_Location& loc,
 
     std::vector<App::DocumentObject *> localValue;
 
-    if (aShapeTool->GetShape(label,aShape)) {
+    if (aShapeTool->GetShape(label, aShape)) {
+#if OCC_VERSION_HEX >= 0x070800
+        hash = std::hash<TopoDS_Shape> {}(aShape);
+#else
         hash = aShape.HashCode(HashUpper);
+#endif
     }
 
     Handle(TDataStd_Name) name;
@@ -217,8 +221,13 @@ void ImportOCAF::loadShapes(const TDF_Label& label, const TopLoc_Location& loc,
 
     if (isRef || myRefShapes.find(hash) == myRefShapes.end()) {
         TopoDS_Shape aShape;
-        if (isRef && aShapeTool->GetShape(label, aShape))
+        if (isRef && aShapeTool->GetShape(label, aShape)) {
+#if OCC_VERSION_HEX >= 0x070800
+            myRefShapes.insert(std::hash<TopoDS_Shape> {}(aShape));
+#else
             myRefShapes.insert(aShape.HashCode(HashUpper));
+#endif
+        }
 
         if (aShapeTool->IsSimpleShape(label) && (isRef || aShapeTool->IsFree(label))) {
             if (!asm_name.empty())
@@ -532,7 +541,11 @@ void ImportXCAF::createShape(const TopoDS_Shape& shape, bool perface, bool setna
     part->Label.setValue(default_name);
     part->Shape.setValue(shape);
     std::map<Standard_Integer, Quantity_ColorRGBA>::const_iterator jt;
+#if OCC_VERSION_HEX >= 0x070800
+    jt = myColorMap.find(std::hash<TopoDS_Shape> {}(shape));
+#else
     jt = myColorMap.find(shape.HashCode(INT_MAX));
+#endif
 
     App::Color partColor(0.8f,0.8f,0.8f);
 #if 0//TODO
@@ -553,7 +566,11 @@ void ImportXCAF::createShape(const TopoDS_Shape& shape, bool perface, bool setna
     // set label name if defined
     if (setname && !myNameMap.empty()) {
         std::map<Standard_Integer, std::string>::const_iterator jt;
+#if OCC_VERSION_HEX >= 0x070800
+        jt = myNameMap.find(std::hash<TopoDS_Shape> {}(shape));
+#else
         jt = myNameMap.find(shape.HashCode(INT_MAX));
+#endif
         if (jt != myNameMap.end()) {
             part->Label.setValue(jt->second);
         }
@@ -573,7 +590,11 @@ void ImportXCAF::createShape(const TopoDS_Shape& shape, bool perface, bool setna
         faceColors.resize(faces.Extent(), partColor);
         xp.Init(shape,TopAbs_FACE);
         while (xp.More()) {
+#if OCC_VERSION_HEX >= 0x070800
+            jt = myColorMap.find(std::hash<TopoDS_Shape> {}(xp.Current()));
+#else
             jt = myColorMap.find(xp.Current().HashCode(INT_MAX));
+#endif
             if (jt != myColorMap.end()) {
                 int index = faces.FindIndex(xp.Current());
                 faceColors[index-1] = convertColor(jt->second);
@@ -607,24 +628,59 @@ void ImportXCAF::loadShapes(const TDF_Label& label)
             int ctSolids = 0, ctShells = 0, ctComps = 0;
             // add the shapes
             TopExp_Explorer xp;
-            for (xp.Init(aShape, TopAbs_SOLID); xp.More(); xp.Next(), ctSolids++)
+            for (xp.Init(aShape, TopAbs_SOLID); xp.More(); xp.Next(), ctSolids++) {
+#if OCC_VERSION_HEX >= 0x070800
+                this->mySolids[std::hash<TopoDS_Shape> {}(xp.Current())] = (xp.Current());
+#else
                 this->mySolids[xp.Current().HashCode(INT_MAX)] = (xp.Current());
-            for (xp.Init(aShape, TopAbs_SHELL, TopAbs_SOLID); xp.More(); xp.Next(), ctShells++)
+#endif
+            }
+            for (xp.Init(aShape, TopAbs_SHELL, TopAbs_SOLID); xp.More(); xp.Next(), ctShells++) {
+#if OCC_VERSION_HEX >= 0x070800
+                this->myShells[std::hash<TopoDS_Shape> {}(xp.Current())] = (xp.Current());
+#else
                 this->myShells[xp.Current().HashCode(INT_MAX)] = (xp.Current());
+#endif
+            }
             // if no solids and no shells were found then go for compounds
             if (ctSolids == 0 && ctShells == 0) {
-                for (xp.Init(aShape, TopAbs_COMPOUND); xp.More(); xp.Next(), ctComps++)
+                for (xp.Init(aShape, TopAbs_COMPOUND); xp.More(); xp.Next(), ctComps++) {
+#if OCC_VERSION_HEX >= 0x070800
+                    this->myCompds[std::hash<TopoDS_Shape> {}(xp.Current())] = (xp.Current());
+#else
                     this->myCompds[xp.Current().HashCode(INT_MAX)] = (xp.Current());
+#endif
+                }
             }
             if (ctComps == 0) {
-                for (xp.Init(aShape, TopAbs_FACE, TopAbs_SHELL); xp.More(); xp.Next())
+                for (xp.Init(aShape, TopAbs_FACE, TopAbs_SHELL); xp.More(); xp.Next()) {
+#if OCC_VERSION_HEX >= 0x070800
+                    this->myShapes[std::hash<TopoDS_Shape> {}(xp.Current())] = (xp.Current());
+#else
                     this->myShapes[xp.Current().HashCode(INT_MAX)] = (xp.Current());
-                for (xp.Init(aShape, TopAbs_WIRE, TopAbs_FACE); xp.More(); xp.Next())
+#endif
+                }
+                for (xp.Init(aShape, TopAbs_WIRE, TopAbs_FACE); xp.More(); xp.Next()) {
+#if OCC_VERSION_HEX >= 0x070800
+                    this->myShapes[std::hash<TopoDS_Shape> {}(xp.Current())] = (xp.Current());
+#else
                     this->myShapes[xp.Current().HashCode(INT_MAX)] = (xp.Current());
-                for (xp.Init(aShape, TopAbs_EDGE, TopAbs_WIRE); xp.More(); xp.Next())
+#endif
+                }
+                for (xp.Init(aShape, TopAbs_EDGE, TopAbs_WIRE); xp.More(); xp.Next()) {
+#if OCC_VERSION_HEX >= 0x070800
+                    this->myShapes[std::hash<TopoDS_Shape> {}(xp.Current())] = (xp.Current());
+#else
                     this->myShapes[xp.Current().HashCode(INT_MAX)] = (xp.Current());
-                for (xp.Init(aShape, TopAbs_VERTEX, TopAbs_EDGE); xp.More(); xp.Next())
+#endif
+                }
+                for (xp.Init(aShape, TopAbs_VERTEX, TopAbs_EDGE); xp.More(); xp.Next()) {
+#if OCC_VERSION_HEX >= 0x070800
+                    this->myShapes[std::hash<TopoDS_Shape> {}(xp.Current())] = (xp.Current());
+#else
                     this->myShapes[xp.Current().HashCode(INT_MAX)] = (xp.Current());
+#endif
+                }
             }
         }
 
@@ -634,7 +690,11 @@ void ImportXCAF::loadShapes(const TDF_Label& label)
             hColors->GetColor(label, XCAFDoc_ColorSurf, col) ||
             hColors->GetColor(label, XCAFDoc_ColorCurv, col)) {
             // add defined color
+#if OCC_VERSION_HEX >= 0x070800
+            myColorMap[std::hash<TopoDS_Shape> {}(aShape)] = col;
+#else
             myColorMap[aShape.HashCode(INT_MAX)] = col;
+#endif
         }
         else {
             // http://www.opencascade.org/org/forum/thread_17107/
@@ -644,7 +704,11 @@ void ImportXCAF::loadShapes(const TDF_Label& label)
                     hColors->GetColor(it.Value(), XCAFDoc_ColorSurf, col) ||
                     hColors->GetColor(it.Value(), XCAFDoc_ColorCurv, col)) {
                     // add defined color
+#if OCC_VERSION_HEX >= 0x070800
+                    myColorMap[std::hash<TopoDS_Shape> {}(it.Value())] = col;
+#else
                     myColorMap[it.Value().HashCode(INT_MAX)] = col;
+#endif
                 }
             }
         }
@@ -656,9 +720,14 @@ void ImportXCAF::loadShapes(const TDF_Label& label)
             char* str = new char[extstr.LengthOfCString()+1];
             extstr.ToUTF8CString(str);
             std::string labelName(str);
-            if (!labelName.empty())
+            if (!labelName.empty()) {
+#if OCC_VERSION_HEX >= 0x070800
+                myNameMap[std::hash<TopoDS_Shape> {}(aShape)] = labelName;
+#else
                 myNameMap[aShape.HashCode(INT_MAX)] = labelName;
-            delete [] str;
+#endif
+            }
+            delete[] str;
         }
 
 #if 0
diff --git a/src/Mod/Import/App/ImportOCAF2.h b/src/Mod/Import/App/ImportOCAF2.h
index e19b921971..a321f154e8 100644
--- a/src/Mod/Import/App/ImportOCAF2.h
+++ b/src/Mod/Import/App/ImportOCAF2.h
@@ -30,7 +30,6 @@
 #include <unordered_map>
 #include <vector>
 
-#include <TDF_LabelMapHasher.hxx>
 #include <TDocStd_Document.hxx>
 #include <TopoDS_Shape.hxx>
 #include <XCAFDoc_ColorTool.hxx>
diff --git a/src/Mod/Import/App/Tools.h b/src/Mod/Import/App/Tools.h
new file mode 100644
index 0000000000..aa05e3067e
--- /dev/null
+++ b/src/Mod/Import/App/Tools.h
@@ -0,0 +1,79 @@
+/****************************************************************************
+ *   Copyright (c) 2018 Zheng, Lei (realthunder) <realthunder.dev@gmail.com>*
+ *                                                                          *
+ *   This file is part of the FreeCAD CAx development system.               *
+ *                                                                          *
+ *   This library is free software; you can redistribute it and/or          *
+ *   modify it under the terms of the GNU Library General Public            *
+ *   License as published by the Free Software Foundation; either           *
+ *   version 2 of the License, or (at your option) any later version.       *
+ *                                                                          *
+ *   This library  is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
+ *   GNU Library General Public License for more details.                   *
+ *                                                                          *
+ *   You should have received a copy of the GNU Library General Public      *
+ *   License along with this library; see the file COPYING.LIB. If not,     *
+ *   write to the Free Software Foundation, Inc., 59 Temple Place,          *
+ *   Suite 330, Boston, MA  02111-1307, USA                                 *
+ *                                                                          *
+ ****************************************************************************/
+
+#ifndef IMPORT_TOOLS_H
+#define IMPORT_TOOLS_H
+
+#include <Quantity_ColorRGBA.hxx>
+#include <TopoDS_Shape.hxx>
+#include <XCAFDoc_ColorTool.hxx>
+#include <XCAFDoc_ShapeTool.hxx>
+#include <App/Color.h>
+
+#include <Standard_Version.hxx>
+
+namespace Import
+{
+
+struct ShapeHasher
+{
+    std::size_t operator()(const TopoDS_Shape& shape) const
+    {
+#if OCC_VERSION_HEX >= 0x070800
+        return std::hash<TopoDS_Shape> {}(shape);
+#else
+        return shape.HashCode(INT_MAX);
+#endif
+    }
+};
+
+struct LabelHasher
+{
+    std::size_t operator()(const TDF_Label& label) const
+    {
+#if OCC_VERSION_HEX >= 0x070800
+        return std::hash<TDF_Label> {}(label);
+#else
+        return TDF_LabelMapHasher::HashCode(label, INT_MAX);
+#endif
+    }
+};
+
+struct Tools
+{
+    static App::Color convertColor(const Quantity_ColorRGBA& rgba);
+    static Quantity_ColorRGBA convertColor(const App::Color& col);
+    static std::string labelName(TDF_Label label);
+    static void printLabel(TDF_Label label,
+                           Handle(XCAFDoc_ShapeTool) aShapeTool,
+                           Handle(XCAFDoc_ColorTool) aColorTool,
+                           const char* msg = nullptr);
+
+    static void dumpLabels(TDF_Label label,
+                           Handle(XCAFDoc_ShapeTool) aShapeTool,
+                           Handle(XCAFDoc_ColorTool) aColorTool,
+                           int depth = 0);
+};
+
+}  // namespace Import
+
+#endif  // IMPORT_IMPORTOCAF2_H
diff --git a/src/Mod/MeshPart/App/CurveProjector.h b/src/Mod/MeshPart/App/CurveProjector.h
index 4fb0d5ff37..722165c585 100644
--- a/src/Mod/MeshPart/App/CurveProjector.h
+++ b/src/Mod/MeshPart/App/CurveProjector.h
@@ -32,6 +32,7 @@
 #include <Mod/Mesh/App/Mesh.h>
 #include <Mod/MeshPart/MeshPartGlobal.h>
 
+#include <Standard_Version.hxx>
 
 namespace MeshCore
 {
@@ -60,12 +61,19 @@ public:
     Base::Vector3f p1,p2;
   };
 
-  template<class T>
-    struct TopoDSLess {
-    bool operator()(const T& x, const T& y) const {
-      return x.HashCode(INT_MAX-1) < y.HashCode(INT_MAX-1);
-    }
-  };
+    template<class T>
+    struct TopoDSLess
+    {
+        bool operator()(const T& x, const T& y) const
+        {
+#if OCC_VERSION_HEX >= 0x070800
+            std::hash<T> hasher;
+            return hasher(x) < hasher(y);
+#else
+            return x.HashCode(INT_MAX - 1) < y.HashCode(INT_MAX - 1);
+#endif
+        }
+    };
 
   using result_type = std::map<TopoDS_Edge, std::vector<FaceSplitEdge>,TopoDSLess<TopoDS_Edge> >;
 
diff --git a/src/Mod/Part/App/ImportStep.cpp b/src/Mod/Part/App/ImportStep.cpp
index 6c41ac5380..1d02eb2d63 100644
--- a/src/Mod/Part/App/ImportStep.cpp
+++ b/src/Mod/Part/App/ImportStep.cpp
@@ -137,7 +137,12 @@ int Part::ImportStepParts(App::Document *pcDoc, const char* Name)
                 // This is a trick to access the GUI via Python and set the color property
                 // of the associated view provider. If no GUI is up an exception is thrown
                 // and cleared immediately
+#if OCC_VERSION_HEX >= 0x070800
+                std::hash<TopoDS_Solid> hasher;
+                std::map<int, Quantity_Color>::iterator it = hash_col.find(hasher(aSolid));
+#else
                 std::map<int, Quantity_Color>::iterator it = hash_col.find(aSolid.HashCode(INT_MAX));
+#endif
                 if (it != hash_col.end()) {
                     try {
                         Py::Object obj(pcFeature->getPyObject(), true);
diff --git a/src/Mod/Part/App/TopoShapePyImp.cpp b/src/Mod/Part/App/TopoShapePyImp.cpp
index c73a70c177..0bf5f81494 100644
--- a/src/Mod/Part/App/TopoShapePyImp.cpp
+++ b/src/Mod/Part/App/TopoShapePyImp.cpp
@@ -1304,7 +1304,11 @@ PyObject*  TopoShapePy::ancestorsOfType(PyObject *args)
         TopTools_ListIteratorOfListOfShape it(ancestors);
         for (; it.More(); it.Next()) {
             // make sure to avoid duplicates
+#if OCC_VERSION_HEX >= 0x070800
+            const size_t code = std::hash<TopoDS_Shape>{}(static_cast<TopoDS_Shape>(it.Value()));
+#else
             Standard_Integer code = it.Value().HashCode(INT_MAX);
+#endif
             if (hashes.find(code) == hashes.end()) {
                 list.append(shape2pyshape(it.Value()));
                 hashes.insert(code);
@@ -1919,7 +1923,11 @@ PyObject* TopoShapePy::hashCode(PyObject *args)
     if (!PyArg_ParseTuple(args, "|i",&upper))
         return nullptr;
 
+#if OCC_VERSION_HEX >= 0x070800
+    int hc = std::hash<TopoDS_Shape>{}(getTopoShapePtr()->getShape());
+#else
     int hc = getTopoShapePtr()->getShape().HashCode(upper);
+#endif
     return Py_BuildValue("i", hc);
 }
 
diff --git a/src/Mod/Part/Gui/AppPartGui.cpp b/src/Mod/Part/Gui/AppPartGui.cpp
index 2ca6e878cb..5455361143 100644
--- a/src/Mod/Part/Gui/AppPartGui.cpp
+++ b/src/Mod/Part/Gui/AppPartGui.cpp
@@ -24,7 +24,6 @@
 
 #include "PreCompiled.h"
 #ifndef _PreComp_
-# include <Standard_math.hxx>
 #endif
 
 #include <Base/Console.h>
diff --git a/src/Mod/Part/Gui/Command.cpp b/src/Mod/Part/Gui/Command.cpp
index b057ef4a81..c8d06c39bf 100644
--- a/src/Mod/Part/Gui/Command.cpp
+++ b/src/Mod/Part/Gui/Command.cpp
@@ -26,7 +26,6 @@
 # include <QFileInfo>
 # include <QPointer>
 # include <QString>
-# include <Standard_math.hxx>
 # include <Standard_Version.hxx>
 # include <TopExp_Explorer.hxx>
 # include <TopoDS_Shape.hxx>
diff --git a/src/Mod/Part/Gui/CommandSimple.cpp b/src/Mod/Part/Gui/CommandSimple.cpp
index e46d034e1d..aaa04fe249 100644
--- a/src/Mod/Part/Gui/CommandSimple.cpp
+++ b/src/Mod/Part/Gui/CommandSimple.cpp
@@ -23,7 +23,6 @@
 
 #include "PreCompiled.h"
 #ifndef _PreComp_
-# include <Standard_math.hxx>
 # include <QInputDialog>
 #endif
 
diff --git a/src/Mod/Part/Gui/CrossSections.cpp b/src/Mod/Part/Gui/CrossSections.cpp
index 1f42410aaf..7e35addbc5 100644
--- a/src/Mod/Part/Gui/CrossSections.cpp
+++ b/src/Mod/Part/Gui/CrossSections.cpp
@@ -28,7 +28,6 @@
 # include <QKeyEvent>
 
 # include <BRep_Builder.hxx>
-# include <Standard_math.hxx>
 # include <TopoDS.hxx>
 # include <TopoDS_Compound.hxx>
 
diff --git a/src/Mod/Part/Gui/ViewProvider2DObject.cpp b/src/Mod/Part/Gui/ViewProvider2DObject.cpp
index 880586d337..61ff90578e 100644
--- a/src/Mod/Part/Gui/ViewProvider2DObject.cpp
+++ b/src/Mod/Part/Gui/ViewProvider2DObject.cpp
@@ -25,7 +25,6 @@
 #ifndef _PreComp_
 # include <cfloat>
 
-# include <Standard_math.hxx>
 
 # include <Inventor/nodes/SoAnnotation.h>
 # include <Inventor/nodes/SoBaseColor.h>
diff --git a/src/Mod/Part/Gui/ViewProviderExt.cpp b/src/Mod/Part/Gui/ViewProviderExt.cpp
index 554f7a405a..4ad97b08bd 100644
--- a/src/Mod/Part/Gui/ViewProviderExt.cpp
+++ b/src/Mod/Part/Gui/ViewProviderExt.cpp
@@ -987,7 +987,11 @@ void ViewProviderPartExt::updateVisual()
 
             TopExp_Explorer xp;
             for (xp.Init(faceMap(i),TopAbs_EDGE);xp.More();xp.Next())
+#if OCC_VERSION_HEX >= 0x070800
+                faceEdges.insert(std::hash<TopoDS_Shape>{}(xp.Current()));
+#else
                 faceEdges.insert(xp.Current().HashCode(INT_MAX));
+#endif
             numFaces++;
         }
 
@@ -1015,7 +1019,11 @@ void ViewProviderPartExt::updateVisual()
             // So, we have to store the hashes of the edges associated to a face.
             // If the hash of a given edge is not in this list we know it's really
             // a free edge.
+#if OCC_VERSION_HEX >= 0x070800
+            int hash = std::hash<TopoDS_Shape>{}(aEdge);
+#else
             int hash = aEdge.HashCode(INT_MAX);
+#endif
             if (faceEdges.find(hash) == faceEdges.end()) {
                 Handle(Poly_Polygon3D) aPoly = Part::Tools::polygonOfEdge(aEdge, aLoc);
                 if (!aPoly.IsNull()) {
@@ -1214,7 +1222,11 @@ void ViewProviderPartExt::updateVisual()
             TopLoc_Location aLoc;
 
             // handling of the free edge that are not associated to a face
+#if OCC_VERSION_HEX >= 0x070800
+            int hash = std::hash<TopoDS_Shape>{}(aEdge);
+#else
             int hash = aEdge.HashCode(INT_MAX);
+#endif
             if (faceEdges.find(hash) == faceEdges.end()) {
                 Handle(Poly_Polygon3D) aPoly = Part::Tools::polygonOfEdge(aEdge, aLoc);
                 if (!aPoly.IsNull()) {
diff --git a/src/Mod/Part/Gui/ViewProviderExt.h b/src/Mod/Part/Gui/ViewProviderExt.h
index 01b75aaa2a..94b2866ee6 100644
--- a/src/Mod/Part/Gui/ViewProviderExt.h
+++ b/src/Mod/Part/Gui/ViewProviderExt.h
@@ -24,7 +24,6 @@
 #define PARTGUI_VIEWPROVIDERPARTEXT_H
 
 #include <map>
-#include <Standard_math.hxx>
 
 #include <App/PropertyUnits.h>
 #include <Gui/ViewProviderGeometryObject.h>
diff --git a/src/Mod/Part/Gui/ViewProviderMirror.cpp b/src/Mod/Part/Gui/ViewProviderMirror.cpp
index f9210f9042..1f9132cc39 100644
--- a/src/Mod/Part/Gui/ViewProviderMirror.cpp
+++ b/src/Mod/Part/Gui/ViewProviderMirror.cpp
@@ -27,7 +27,6 @@
 # include <QMenu>
 # include <QTimer>
 
-# include <Standard_math.hxx>
 # include <TopExp.hxx>
 # include <TopTools_IndexedMapOfShape.hxx>
 
diff --git a/src/Mod/Part/Gui/ViewProviderPython.cpp b/src/Mod/Part/Gui/ViewProviderPython.cpp
index e7fa75fe1b..1b6a1ff8d4 100644
--- a/src/Mod/Part/Gui/ViewProviderPython.cpp
+++ b/src/Mod/Part/Gui/ViewProviderPython.cpp
@@ -22,7 +22,6 @@
 
 #include "PreCompiled.h"
 
-#include <Standard_math.hxx>
 #ifndef _PreComp_
 # include <Inventor/nodes/SoSeparator.h>
 #endif
diff --git a/src/Mod/Part/Gui/ViewProviderReference.h b/src/Mod/Part/Gui/ViewProviderReference.h
index b7a0219b3b..af40af2fae 100644
--- a/src/Mod/Part/Gui/ViewProviderReference.h
+++ b/src/Mod/Part/Gui/ViewProviderReference.h
@@ -24,7 +24,6 @@
 #ifndef PARTGUI_ViewProviderPartReference_H
 #define PARTGUI_ViewProviderPartReference_H
 
-#include <Standard_math.hxx>
 #include <Standard_Boolean.hxx>
 #include <TopoDS_Shape.hxx>
 #include <Gui/ViewProviderGeometryObject.h>
diff --git a/src/Mod/Path/App/Voronoi.cpp b/src/Mod/Path/App/Voronoi.cpp
index 27a509c20c..443b747507 100644
--- a/src/Mod/Path/App/Voronoi.cpp
+++ b/src/Mod/Path/App/Voronoi.cpp
@@ -22,7 +22,8 @@
 
 #include "PreCompiled.h"
 #ifndef _PreComp_
-# include <Standard_math.hxx>
+#define _USE_MATH_DEFINES
+# include <math.h>
 #endif
 
 #include <Base/Vector3D.h>
diff --git a/src/Mod/Path/Gui/PreCompiled.h b/src/Mod/Path/Gui/PreCompiled.h
index f12ef8f919..ed8cef500f 100644
--- a/src/Mod/Path/Gui/PreCompiled.h
+++ b/src/Mod/Path/Gui/PreCompiled.h
@@ -38,8 +38,6 @@
 # define PathGuiExport
 #endif
 
-#include <Standard_math.hxx>
-
 #ifdef _MSC_VER
 # pragma warning( disable : 4273 )
 #endif
diff --git a/src/Mod/Robot/Gui/PreCompiled.h b/src/Mod/Robot/Gui/PreCompiled.h
index eb2a061446..e5496201ec 100644
--- a/src/Mod/Robot/Gui/PreCompiled.h
+++ b/src/Mod/Robot/Gui/PreCompiled.h
@@ -38,8 +38,6 @@
 # define RobotGuiExport
 #endif
 
-#include <Standard_math.hxx>
-
 #ifdef _MSC_VER
 # pragma warning(disable : 4005)
 # pragma warning(disable : 4273)
diff --git a/src/Mod/Sketcher/Gui/EditDatumDialog.cpp b/src/Mod/Sketcher/Gui/EditDatumDialog.cpp
index dbfd423b99..ceae48c4ef 100644
--- a/src/Mod/Sketcher/Gui/EditDatumDialog.cpp
+++ b/src/Mod/Sketcher/Gui/EditDatumDialog.cpp
@@ -23,7 +23,6 @@
 #include "PreCompiled.h"
 
 #ifndef _PreComp_
-#include <Standard_math.hxx>
 /// Qt Include Files
 #include <Inventor/sensors/SoSensor.h>
 #include <QApplication>
